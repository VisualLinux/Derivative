//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Untitled
//  @ File Name : Expression.cs
//  @ Date : 2017. 06. 21.
//  @ Author : 
//
//
using System;
using System.Collections.Generic;
using System.Linq;

namespace CalculateDerivative
{
    public abstract class Node
    {
        protected abstract int ArgumentNumber { get; }
        public Node[] Children { get; }

        protected Node(Node[] children)
        {
            if (children == null)
            {
                if (ArgumentNumber != 0)
                {
                    throw new ArgumentOutOfRangeException("Wrong number of arguments");
                }
                Children = children;
                return;
            }
            if (children.Length != ArgumentNumber)
            {
                throw new ArgumentOutOfRangeException("Wrong number of arguments");
            }
            Children = children;
        }

        public abstract MathExpression Derivative(string variable);

        protected List<Node> Derivatives(string variable) => Children.Select(child => child.Derivative(variable).Root)
            .ToList();

        public override bool Equals(object obj) => !Children.Where((t, i) => !t.Equals(((Node) obj).Children[i])).Any();

        public override int GetHashCode()
        {
            var hash = 17;
            hash = hash * 23 + ArgumentNumber.GetHashCode();
            hash = hash * 23 + Children.GetHashCode();
            return hash;
        }
    }
}