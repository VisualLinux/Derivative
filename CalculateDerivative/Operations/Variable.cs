//
//
//  Generated by StarUML(tm) C# Add-In
//
//  @ Project : Untitled
//  @ File Name : Operation.cs
//  @ Date : 2017. 06. 21.
//  @ Author : 
//
//


namespace CalculateDerivative.Operations
{
    public sealed class Variable : Node
    {
        protected override int ArgumentNumber => 0;
        public string Name { get; }
        public Variable(string name):base(null)
        {
            Name = name;
        }
        public override bool Equals(object obj)
        {

            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return Name.Equals(((Variable)obj).Name);
        }
        public override int GetHashCode()
        {
            var hash = 17;
            hash = hash * 23 + ArgumentNumber.GetHashCode();
            hash = hash * 23 + Children.GetHashCode();
            hash = hash * 23 + Name.GetHashCode();
            return hash;
        }

        public override MathExpression Derivative(string variable) => variable == Name
            ? new MathExpression(new Constant(1))
            : new MathExpression(new Constant(0));
    }
}
